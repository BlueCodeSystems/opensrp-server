<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
		namespace="org.opensrp.repository.postgres.mapper.custom.CustomEventMapper">

	<resultMap id="BaseEventResultMap" type="org.opensrp.domain.postgres.Event">
		<id column="id" jdbcType="BIGINT" property="id" />
		<result column="json" jdbcType="OTHER" property="json"
				typeHandler="org.opensrp.repository.postgres.handler.EventTypeHandler" />
	</resultMap>

	<resultMap id="customQueryMap" type="org.opensrp.domain.postgres.CustomQuery">
		<id column="id" jdbcType="BIGINT" property="id" />
		<result column="name" jdbcType="VARCHAR" property="name"/>
		<result column="password" jdbcType="VARCHAR" property="password"/>
		<result column="person_uuid" jdbcType="VARCHAR" property="personUUID"/>
		<result column="uuid" jdbcType="VARCHAR" property="userUUID"/>
		<result column="full_name" jdbcType="VARCHAR" property="fullName"/>
	</resultMap>

	<resultMap id="healthIdMap" type="org.opensrp.domain.postgres.HealthId">
		<id column="id" jdbcType="BIGINT" property="id" />
		<result column="hId" jdbcType="VARCHAR" property="hId"/>
		<result column="type" jdbcType="VARCHAR" property="type"/>
	</resultMap>


	<sql id="Base_Event_Column_List">
		id, json
	</sql>

	<select id="selectByDocumentId" parameterType="java.lang.String"
			resultMap="BaseEventResultMap">
		select
		<include refid="Base_Event_Column_List" />
		from core.event
		WHERE json ->> 'id' = #{documentId,jdbcType=VARCHAR} and date_deleted is null
	</select>

	<select id="getLocations" parameterType="int"
			resultMap="customQueryMap">
		select team_member.id as id ,core.location.name as name from core.team_member
		left join core.team_member_location on team_member.id =  team_member_location.team_member_id
		left join core.location on  team_member_location.location_id = location.id
		WHERE team_member.person_id = #{userId}
	</select>

	<select id="getUser" parameterType="java.lang.String"
			resultMap="customQueryMap">
		select id as id, username as name,password,person_uuid, uuid,concat(trim(first_name),' ',trim(last_name)) as full_name  from core.users
		WHERE username = #{userName,jdbcType=VARCHAR}
	</select>
	
	<select id="getRoles" resultMap="customQueryMap">
		select r.name from core.user_role as ul join core.role as r
		on ul.role_id = r.id where ul.user_id = #{userId}
	</select>


	<insert id="insertSelectiveAndSetId" parameterType="org.opensrp.domain.postgres.Event"
			useGeneratedKeys="true" keyProperty="id" keyColumn="id">
		insert into core.event
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="json != null">
				json,
			</if>
			<if test="memberCount != null">
				member_count,
			</if>
			<if test="householdType != null">
				household_type,
			</if>
			<if test="latrineStructure != null">
				latrine_structure,
			</if>
			<if test="waterSource != null">
				water_source,
			</if>
			<if test="financialStatus != null">
				financial_status,
			</if>
			<if test="monthlyExpenditure != null">
				monthly_expenditure,
			</if>
			<if test="dateOfReg != null">
				event_date_of_reg,
			</if>
			<if test="providerId != null">
				event_provider_id,
			</if>
			<if test="team != null">
				event_team,
			</if>
			<if test="eventType != null">
				event_event_type,
			</if>
			<if test="serverVersion != null">
				event_server_version,
			</if>
			<if test="baseEntityId != null">
				event_base_entity_id,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=BIGINT},
			</if>
			<if test="json != null">
				#{json,jdbcType=OTHER,typeHandler=org.opensrp.repository.postgres.handler.EventTypeHandler},
			</if>
			
			<if test="memberCount != null">
				#{memberCount,jdbcType=BIGINT},
			</if>
			<if test="householdType != null">
				#{householdType,jdbcType=VARCHAR},
			</if>		
			
			<if test="latrineStructure != null">
				#{latrineStructure,jdbcType=VARCHAR},
			</if>
			<if test="waterSource != null">
				#{waterSource,jdbcType=VARCHAR},
			</if>
			<if test="financialStatus != null">
				#{financialStatus,jdbcType=VARCHAR},
			</if>
			<if test="monthlyExpenditure != null">
				#{monthlyExpenditure,jdbcType=BIGINT},
			</if>
			<if test="dateOfReg != null">
				#{dateOfReg,jdbcType=VARCHAR},
			</if>
			<if test="providerId != null">
				#{providerId,jdbcType=VARCHAR},
			</if>
			<if test="team != null">
				#{team,jdbcType=VARCHAR},
			</if>
			<if test="eventType != null">
				#{eventType,jdbcType=VARCHAR},
			</if>
			<if test="serverVersion != null">
				#{serverVersion,jdbcType=BIGINT},
			</if>
			<if test="baseEntityId != null">
				#{baseEntityId,jdbcType=VARCHAR},
			</if>
		</trim>
	</insert>

	<select id="selectByIdentifier" parameterType="java.lang.String"
			resultMap="BaseEventResultMap">
		select
		<include refid="Base_Event_Column_List" />
		from core.event
		join jsonb_each_text(core.event.json ->
		'identifiers') j
		on true
		where j.value = #{identifier,jdbcType=VARCHAR} and date_deleted is null
	</select>

	<select id="selectByIdentifierOfType" parameterType="map"
			resultMap="BaseEventResultMap">
		select
		<include refid="Base_Event_Column_List" />
		from core.event
		where json -> 'identifiers' ->>
		#{identifierType,jdbcType=VARCHAR} =
		#{identifier,jdbcType=VARCHAR}
		and date_deleted is null
	</select>

	<select id="selectByBaseEntityIdConceptAndDate" parameterType="map"
			resultMap="BaseEventResultMap">
		select
		<include refid="Base_Event_Column_List" />
		from (	select  id id_, json,jsonb_array_elements(json->'obs') as obs_object,
		jsonb_array_elements_text(jsonb_array_elements(json->'obs')->'values') as obs_value
		from core.event ) j
		join core.event_metadata e on e.event_id=j.id_
		where e.base_entity_id= #{baseEntityId,jdbcType=VARCHAR}
		<if test="dateFrom != null and dateTo != null">
			and e.date_created between #{dateFrom,jdbcType=DATE} and #{dateTo,jdbcType=DATE}
		</if>
		and obs_object->>'fieldCode'=#{concept,jdbcType=VARCHAR}
		and obs_value=#{conceptValue,jdbcType=VARCHAR}
		and date_deleted is null
	</select>

	<select id="selectByBaseEntityIdAndConceptParentCode" parameterType="map"
			resultMap="BaseEventResultMap">
		select
		<include refid="Base_Event_Column_List" />
		from (	select  id id_, json,jsonb_array_elements(json->'obs') as obs_object
		from core.event ) j
		join core.event_metadata e on e.event_id=j.id_
		where e.base_entity_id= #{baseEntityId,jdbcType=VARCHAR}
		and obs_object->>'fieldCode'=#{concept,jdbcType=VARCHAR}
		and obs_object->>'parentCode'=#{parentCode,jdbcType=VARCHAR}
		and date_deleted is null
	</select>

	<select id="selectByConceptAndValue" parameterType="map"
			resultMap="BaseEventResultMap">
		select
		<include refid="Base_Event_Column_List" />
		from (	select  id, json,date_deleted,jsonb_array_elements(json->'obs') as obs_object,
		jsonb_array_elements_text(jsonb_array_elements(json->'obs')->'values') as obs_value
		from core.event ) j
		where obs_object->>'fieldCode'=#{concept,jdbcType=VARCHAR}
		and obs_value=#{conceptValue,jdbcType=VARCHAR}
		and date_deleted is null
	</select>

	<select id="gethealthIds" parameterType="map" resultMap="healthIdMap">
		select id as id, h_id as hId, type  from core.health_id
		WHERE status = false order by id desc limit 10
	</select>

	<update id="updateHealthId" parameterType="org.opensrp.domain.postgres.HealthId">
		update core.health_id set status = false WHERE id = #{id}
	</update>


</mapper>