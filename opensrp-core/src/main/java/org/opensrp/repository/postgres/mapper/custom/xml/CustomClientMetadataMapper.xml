<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
	namespace="org.opensrp.repository.postgres.mapper.custom.CustomClientMetadataMapper">
		
	<sql id="Base_Column_List">
		c.id, c.json
	</sql>
	
	<sql id="Base_Table_List">
		from core.client_metadata cm
		join core.client c on cm.client_id = c.id
	</sql>
	
	<resultMap id="householdProperties" type="map">
        <result column="household_type" property="household_type"/>
        <result column="latrine_structure" property="latrine_structure"/>
        <result column="water_source" property="water_source"/>
        <result column="monthly_expenditure" property="monthly_expenditure"/>        
        <result column="base_entity_id" property="base_entity_id"/>
        <result column="financial_status" property="financial_status"/> 
        <association property="householdHead" resultMap="householdHeadProperties"/>
        
    </resultMap>
    
    <resultMap id="householdHeadProperties" type="map">
        <result column="first_name" property="first_name"/>
        <result column="last_name" property="last_name"/>
        <result column="member_id" property="member_id"/>
        <result column="gender" property="gender"/>
        <result column="blood_group" property="blood_group"/>
        <result column="profession" property="profession"/>
        <result column="contact_number" property="contact_number"/>
        <result column="health_id_card" property="health_id_card"/>
        <result column="date_of_birth" property="date_of_birth"/>
        <result column="communicable_disease" property="communicable_disease"/>
        <result column="non_communicable_disease" property="non_communicable_disease"/>         
    </resultMap>
    
    <resultMap id="HouseholdInfoResultMap" type="org.opensrp.domain.HouseholdInfo">    
    	<result column="event_server_version" jdbcType="BIGINT" property="serverVersion" />
    	<result column="provider_name" jdbcType="VARCHAR" property="providerName" />
    	<result column="provider_id" jdbcType="VARCHAR" property="providerId" />
    	<result column="ccName" jdbcType="VARCHAR" property="ccName" />
    	<result column="event_type" jdbcType="VARCHAR" property="eventType" />
    	<result column="dateCreated" jdbcType="VARCHAR" property="dateCreated" />	    
	    <association property="household" resultMap="householdProperties"/>
	     	    
   	</resultMap>



	<resultMap id="CCInfoMap" type="org.opensrp.domain.CCInfo">
		<result column="id" jdbcType="INTEGER" property="id" />
		<result column="district" jdbcType="VARCHAR" property="district" />
		<result column="district_code" jdbcType="VARCHAR" property="districtCode" />
		<result column="division" jdbcType="VARCHAR" property="division" />
		<result column="division_code" jdbcType="VARCHAR" property="divisionCode" />
		<result column="name" jdbcType="VARCHAR" property="name" />
		<result column="union_name" jdbcType="VARCHAR" property="unionName" />
		<result column="union_code" jdbcType="VARCHAR" property="unionCode" />
		<result column="upazila" jdbcType="VARCHAR" property="upazila" />
		<result column="upazila_code" jdbcType="VARCHAR" property="upazilaCode" />
		<result column="ward" jdbcType="VARCHAR" property="ward" />
		<result column="ward_code" jdbcType="VARCHAR" property="wardCode" />
	</resultMap>

	<resultMap id="MHVInfoMap" type="org.opensrp.domain.MHVInfo">
		<result column="id" jdbcType="INTEGER" property="id" />
		<result column="name" jdbcType="VARCHAR" property="name" />
		<result column="cc_id" jdbcType="INTEGER" property="ccId" />
		<result column="facility_worker_type_id" jdbcType="INTEGER" property="facilityWorkerTypeId" />
		<result column="username" jdbcType="VARCHAR" property="username" />
	</resultMap>

   	<select id="selectHouseholdInfo" resultMap="HouseholdInfoResultMap">
	 
	 with hh_info as(
select
	e.event_base_entity_id as base_entity_id,
	e.member_count,
	e.household_type as household_type,
	e.event_event_type as event_type,
	e.event_provider_id as provider_id,
	e.event_team as ccName,	
	e.id,
	e.water_source as water_source,
	e.latrine_structure as latrine_structure,
	e.financial_status as financial_status,
	e.monthly_expenditure as monthly_expenditure,
	e.event_date_of_reg as dateCreated,
	e.event_server_version
from
	core.event e
where
	e.event_event_type = #{type,jdbcType=VARCHAR}
	and e.event_provider_id is not null
	and e.event_provider_id != ''
	and e.event_server_version > #{serevrVersion,jdbcType=BIGINT}
	and e.member_count > 0 order by event_server_version asc limit 500 ),
hh_member_count as (
select
	c.client_relation_id,
	count(*)  _count
from
	core.client c
where
	c.client_relation_id = any(
	select
		base_entity_id
	from
		hh_info) group by c.client_relation_id),
		
household as (
select
	hm.*,
	uce.*
from
	hh_member_count hm,
	hh_info uce
where
	hm.client_relation_id = uce.base_entity_id
	and hm._count >= uce.member_count ),
	
hh_head as (
select
	c.*
from
	core.client c
where
	c.relationship = 'Household_Head'
	and c.client_relation_id = any(
	select
		hh_info.base_entity_id
	from
		hh_info) )
select
	household.*,
	
	hh_head."json"->>'firstName' as first_name,
	hh_head."json"->>'lastName' as last_name,
	hh_head."json"->>'baseEntityId' as member_id,
	hh_head."json"->>'gender' as gender,
	hh_head."json"->>'birthdate' as date_of_birth,
	hh_head."json"->'attributes'->>'bloodgroup' as blood_group,
	hh_head."json"->'attributes'->>'occupation' as profession,
	hh_head."json"->'identifiers'->>'Patient_Identifier' as health_id_card,
	hh_head."json"->'identifiers'->>'Communicable Disease' as communicable_disease,
	hh_head."json"->'identifiers'->>'Non Communicable Disease' as non_communicable_disease
from
	household
join hh_head on
	household.base_entity_id = hh_head.client_relation_id order by event_server_version asc
   	</select>
	<select id="selectHouseholdVisitInfo" resultMap="HouseholdInfoResultMap">

with visit_info as (
	select
		e.event_base_entity_id as base_entity_id,
		e.event_event_type as event_type,
		e.id
	from core.event e
	where e.event_event_type != 'Household Registration'
	and e.event_event_type != 'Update Household Registration'
    and e.event_provider_id is not null
	and e.event_provider_id != ''
	and e.event_server_version > #{serevrVersion,jdbcType=BIGINT}
	order by event_server_version asc limit 500
)
--select * from visit_info
-- need member information to get the hosuehold info
,member_info as (
	select c.*, vi.event_type as event_type
		from core.client c, visit_info vi
		where  c.client_base_entity_id = vi.base_entity_id
)
-- select * from member_info
, hh_short_info as (
	select c.client_base_entity_id as household_base_entity_id, mi.event_type as event_type
	from core.client c, member_info mi
	where c.client_base_entity_id = mi.client_relation_id
)
--select * from hh_short_info
, hh_member_count as (
	select c.client_relation_id hh_base_entity_id , count(*)  _count from core.client c
		where c.client_relation_id = any(select household_base_entity_id from hh_short_info)
		group by c.client_relation_id
)
, hh_info as (
	select
	e.event_base_entity_id as base_entity_id,
	hhi.event_type as event_type,
	e.member_count,
	e.household_type as household_type,
	e.event_provider_id as provider_id,
	e.event_team as ccName,
	e.id,
	e.water_source as water_source,
	e.latrine_structure as latrine_structure,
	e.financial_status as financial_status,
	e.monthly_expenditure as monthly_expenditure,
	e.event_date_of_reg as dateCreated,
	e.event_server_version from core.event e
	join hh_short_info hhi on e.event_base_entity_id = hhi.household_base_entity_id
	join hh_member_count hh_mc on e.event_base_entity_id = hh_mc.hh_base_entity_id
	where hh_mc._count >= e.member_count

)

,hh_head as (
select c.* from core.client c
    where c.relationship = 'Household_Head'
	and c.client_relation_id = any( select hh_info.base_entity_id from hh_info)
)
--select * from hh_info
select
	 hh_info.*,
	hh_head."json"->>'firstName' as first_name,
	hh_head."json"->>'lastName' as last_name,
	hh_head."json"->>'baseEntityId' as member_id,
	hh_head."json"->>'gender' as gender,
	hh_head."json"->>'birthdate' as date_of_birth,
	hh_head."json"->'attributes'->>'bloodgroup' as blood_group,
	hh_head."json"->'attributes'->>'occupation' as profession,
	hh_head."json"->'identifiers'->>'Patient_Identifier' as health_id_card,
	hh_head."json"->'identifiers'->>'Communicable Disease' as communicable_disease,
	hh_head."json"->'identifiers'->>'Non Communicable Disease' as non_communicable_disease
from
	hh_info
join hh_head on
	hh_info.base_entity_id = hh_head.client_relation_id order by event_server_version asc

	</select>
	<select id="selectCC" resultMap="CCInfoMap" >
		SELECT hrm_id id,
	district,
	district_code,
	division,
	division_code,
	name,
	union_name,
	union_code,
	upazila,
	upazila_code,
	ward,
	ward_code
	from core.facility limit 100 offset 100 * #{page, jdbcType=INTEGER};
	</select>
	<select id="selectProviders" resultMap="MHVInfoMap">
		with providers as (
		select fw.id, fw.name, f.hrm_id cc_id, fw.facility_id, fw.facility_worker_type_id
			from  core.facility_worker fw
			join core.facility f on fw.facility_id = f.id
			where fw.facility_worker_type_id = #{userType, jdbcType=INTEGER}
		) select p.*, u.username  from core.users u
			 join providers p on concat(u.first_name,' ',u.last_name) = p.name
			 and (u.chcp)::int = p.facility_id
			 limit 100  offset 100 * #{page, jdbcType=INTEGER}



	</select>
    
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and cm.${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and cm.${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and cm.${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and cm.${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem"
										open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	
	
	<select id="selectMany"
		resultMap="org.opensrp.repository.postgres.mapper.ClientMapper.BaseResultMap">
		select
		<if test="example.distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		<include refid="Base_Table_List" />
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="example.orderByClause != null">
			order by cm.${example.orderByClause}
		</if>
		 LIMIT #{limit} OFFSET #{offset}
	</select>	
	
	<select id="selectByName"
		resultMap="org.opensrp.repository.postgres.mapper.ClientMapper.BaseResultMap">
		select
		<include refid="Base_Column_List" />
		<include refid="Base_Table_List" />
		<bind name="name" value="'%' + name + '%'" />
		where ( cm.first_name ilike #{name} or cm.middle_name ilike #{name} or cm.last_name ilike #{name} )
		and cm.date_deleted is null
		LIMIT #{limit} OFFSET #{offset}
	</select>	
	
	<select id="selectOne" parameterType="java.lang.String"
		resultMap="org.opensrp.repository.postgres.mapper.ClientMapper.BaseResultMap">
		select
		<include refid="Base_Column_List" />
		<include refid="Base_Table_List" />
		where cm.base_entity_id = #{baseEntityId,jdbcType=VARCHAR} and cm.date_deleted is null
	</select>
	
	<select id="selectByDocumentId" parameterType="java.lang.String"
		resultMap="org.opensrp.repository.postgres.mapper.ClientMapper.BaseResultMap">
		select
		<include refid="Base_Column_List" />
		<include refid="Base_Table_List" />
		where cm.document_id = #{documentId,jdbcType=VARCHAR} and cm.date_deleted is null
	</select>
	
	
	<select id="selectBySearchBean"
		resultMap="org.opensrp.repository.postgres.mapper.ClientMapper.BaseResultMap">		
		
		
		
		select id,json from core.client where core.client.id=any(
			select client_id from core.client_metadata where server_version::BIGINT >= #{clientBean.serverVersion,jdbcType=BIGINT}
			
			<if test="addressBean.address2 != null">
					and address2 IN				
			    	<foreach close=")" collection="addressBean.address2" item="listItem" open="(" separator=",">
							#{listItem}
					</foreach>	
			</if>
			<if test="addressBean.address1 != null">
				and address1 IN
				<foreach close=")" collection="addressBean.address1" item="listItem" open="(" separator=",">
					#{listItem}
				</foreach>
			</if>
		) 
		order by (json->>'serverVersion')::bigint asc LIMIT #{limit}
		<!-- <include refid="Base_Column_List" />
		<include refid="Base_Table_List" />
		<if test="addressBean!=null and addressBean.hasFilter">
			join jsonb_array_elements(json->'addresses') as address on true	
		</if>
		<where>
			<trim prefixOverrides="and">
			 	cm.date_deleted is null
				<if test="clientBean.nameLike != null">
					<bind name="name" value="'%' + clientBean.nameLike + '%'" />
					and (	cm.first_name ilike #{name} or
							cm.middle_name ilike #{name} or
							cm.last_name ilike #{name} 
						)
				</if>
				<if test="clientBean.gender != null">
					and c.json->>'gender' = #{clientBean.gender,jdbcType=VARCHAR}
				</if>
				<if test="clientBean.birthdateFrom != null and clientBean.birthdateTo != null">
					and cm.birth_date  
					between #{clientBean.birthdateFrom,typeHandler=org.opensrp.repository.postgres.handler.DateTimeTypeHandler} 
					and	 	#{clientBean.birthdateTo,typeHandler=org.opensrp.repository.postgres.handler.DateTimeTypeHandler}
				</if>
				<if test="clientBean.deathdateFrom != null and clientBean.deathdateTo != null">
					and (json->>'deathdate')::date
					between #{clientBean.deathdateFrom,typeHandler=org.opensrp.repository.postgres.handler.DateTimeTypeHandler} 
					and	 	#{clientBean.deathdateTo,typeHandler=org.opensrp.repository.postgres.handler.DateTimeTypeHandler}
				</if>
				<if test="clientBean.attributeType != null and clientBean.attributeValue != null">
					and json -> 'attributes' ->> #{clientBean.attributeType,jdbcType=VARCHAR} = #{clientBean.attributeValue,jdbcType=VARCHAR}
				</if>
				<if test="clientBean.lastEditFrom != null and clientBean.lastEditTo != null">
					and (json->>'dateEdited')::timestamp
					between #{clientBean.lastEditFrom,typeHandler=org.opensrp.repository.postgres.handler.DateTimeTypeHandler} 
					and	 	#{clientBean.lastEditTo,typeHandler=org.opensrp.repository.postgres.handler.DateTimeTypeHandler}
				</if>
				<if test="clientBean.serverVersion != null">
					and (c.json->>'serverVersion')::BIGINT >= #{clientBean.serverVersion,jdbcType=BIGINT}
				</if> 
				<if test="addressBean.addressType != null">
					and address ->> 'addressType' = #{addressBean.addressType,jdbcType=VARCHAR}
				</if>
				<if test="addressBean.country != null">
					and address ->'addressFields' ->> 'country' = #{addressBean.country,jdbcType=VARCHAR}
				</if>
				<if test="addressBean.stateProvince != null">
					and address ->'addressFields' ->> 'stateProvince' = #{addressBean.stateProvince,jdbcType=VARCHAR}
				</if>
				<if test="addressBean.cityVillage != null">
					and address ->'addressFields' ->> 'cityVillage' = #{addressBean.cityVillage,jdbcType=VARCHAR}
				</if>
				<if test="addressBean.countyDistrict != null">
					and address ->'addressFields' ->> 'countyDistrict' = #{addressBean.countyDistrict,jdbcType=VARCHAR}
				</if>
				<if test="addressBean.town != null">
					and address ->'addressFields' ->> 'town' = #{addressBean.town,jdbcType=VARCHAR}
				</if>
				<if test="addressBean.subTown != null">
					and address ->'addressFields' ->> 'subTown' = #{addressBean.subTown,jdbcType=VARCHAR}
				</if> 
				<if test="addressBean.address2 != null">
					and address ->'addressFields' ->> 'address2' IN(#{addressBean.address2,jdbcType=VARCHAR})
				</if> 
				<if test="addressBean.address3 != null">
					and address ->'addressFields' ->> 'address3' = #{addressBean.address3,jdbcType=VARCHAR}
				</if> 
				Params for SearchRepository
				<if test="clientBean.firstName != null">	
					<bind name="firstName" value="'%' + clientBean.firstName + '%'" />
					and c.json->>'firstName' ilike #{firstName}
				</if>
				<if test="clientBean.middleName != null">
					<bind name="middleName" value="'%' + clientBean.middleName + '%'" />
					and c.json->>'middleName' ilike #{middleName}
				</if>
				<if test="clientBean.lastName != null">
					<bind name="lastName" value="'%' + clientBean.lastName + '%'" />
					and c.json->>'lastName' ilike #{lastName}
				</if>
				<if test="addressBean.address2 != null">
					and cm.address2 IN				
			    	<foreach close=")" collection="addressBean.address2" item="listItem" open="(" separator=",">
							#{listItem}
					</foreach>	
				</if>
				<if test="addressBean.address3 != null">
					and address ->'addressFields' ->> 'address3' IN				
			    	<foreach close=")" collection="addressBean.address3" item="listItem" open="(" separator=",">
							#{listItem}
					</foreach>	
				</if>	    		
				
				<if test="clientBean.identifiers != null" >
					<trim prefix="and ("  suffix=")" >
					 <foreach collection="clientBean.identifiers" index="key" item="value" separator=" or " >
		        			json -> 'identifiers' ->> #{key,jdbcType=VARCHAR} = #{value,jdbcType=VARCHAR}
		    			</foreach>
		    			</trim>
				</if>
				<if test="clientBean.attributes != null" >
					<trim prefix="and (" suffix=")" >			 
					 <foreach collection="clientBean.attributes"  index="key" item="value" separator=" or " >
		        			json -> 'attributes' ->> #{key,jdbcType=VARCHAR} = #{value,jdbcType=VARCHAR}
		    			</foreach>
		    			</trim>
				</if>
			</trim>
		</where>
		order by cm.serverVersion asc LIMIT #{limit}  -->
	</select>	
	
	
</mapper>
