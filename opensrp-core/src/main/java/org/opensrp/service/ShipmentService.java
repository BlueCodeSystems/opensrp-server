package org.opensrp.service;

import org.apache.http.util.TextUtils;
import org.joda.time.DateTime;
import org.opensrp.domain.Shipment;
import org.opensrp.repository.AllShipments;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class ShipmentService {

    private AllShipments allShipments;

    @Autowired
    public ShipmentService(AllShipments allShipments) {
        this.allShipments = allShipments;
    }

    public synchronized Shipment add(Shipment shipment) {
        //ASSUMPTION: Shipments with an id (Auto-generated by CouchDB) are already saved in CouchDB
        if (!TextUtils.isEmpty(shipment.getId())) {
            throw new IllegalArgumentException("Shipment object should not have id field populated. " +
                    "Alternatively, " + shipment.getId() + " already exists");
        }

        shipment.setDateCreated(new DateTime());
        allShipments.add(shipment);
        return shipment;
    }

    /**
     *  Queries for {@link Shipment}s in CouchDB whose {@link Shipment#receivingFacility} code is
     *  the receivingFacilityCode passed & serverVersion is greater than the {@code serverVersion} passed and returns a
     *  {@link List} of {@link Shipment} orderedBy {@code orderBy} field that is passed in order {@code sortOrder} passed
     *  limited to {@code limit} passed.
     * <p>
     *  {@code sortOrder} values can be <strong>desc</strong> or <strong>asc</strong>
     *
     * @param receivingFacilityCode
     * @param serverVersion
     * @param orderBy
     * @param sortOrder
     * @param limit
     *
     * @return a {@link List} of {@link Shipment} based on the query specified
     */
    public List<Shipment> findShipmentsByReceivingFacility(String receivingFacilityCode, long serverVersion,
                                                           String orderBy, String sortOrder, int limit) {
        return allShipments.findShipmentsByReceivingFacility(receivingFacilityCode, serverVersion, orderBy,
                sortOrder, limit);
    }
}
